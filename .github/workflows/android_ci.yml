name: Android CI

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/android_ci.yml'
      - 'Mobile/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Mobile/**'

jobs:
  android-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Mobile

    env:
      ANDROID_AVD_HOME: ${{ github.workspace }}/.android/avd
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 统一配置Android环境变量
      - name: Configure Android environment
        run: |
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_AVD_HOME=$ANDROID_AVD_HOME" >> $GITHUB_ENV
          mkdir -p $ANDROID_AVD_HOME
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties

      - name: Create secrets in local.properties
        run: |
          echo "IP=${{ secrets.IP }}" >> local.properties
          echo "SecretId=${{ secrets.SECRET_ID }}" >> local.properties
          echo "SecretKey=${{ secrets.SECRET_KEY }}" >> local.properties

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 使用预配置的Android Actions
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          avd-home: ${{ env.ANDROID_AVD_HOME }}

      - name: Accept SDK licenses
        run: yes | $ANDROID_SDK_ROOT/tools/bin/sdkmanager --licenses || true

      # 添加必要工具到PATH
      - name: Add Android tools to PATH
        run: |
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/emulator" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

      - name: Install required SDK components
        run: |
          $ANDROID_SDK_ROOT/tools/bin/sdkmanager --install "platform-tools" "platforms;android-33" "emulator"
          $ANDROID_SDK_ROOT/tools/bin/sdkmanager --install "system-images;android-33;google_apis;x86_64"

      - name: Build Debug APK
        run: ./gradlew assembleDebug

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

      - name: Create Android Emulator
        run: |
          echo "Creating AVD in $ANDROID_AVD_HOME"
          mkdir -p $ANDROID_AVD_HOME
          echo "no" | avdmanager create avd -n test -k "system-images;android-33;google_apis;x86_64" \
                --device "pixel" --force \
                --path "$ANDROID_AVD_HOME/test.avd"
          
          echo "Displaying AVD configuration"
          cat $ANDROID_AVD_HOME/test.avd/config.ini

      - name: Verify available AVDs
        run: avdmanager list avd

      # 使用更可靠的模拟器启动脚本
      - name: Start Android Emulator
        run: |
          echo "Starting emulator with AVD home: $ANDROID_AVD_HOME"
          
          # 后台启动模拟器
          $ANDROID_SDK_ROOT/emulator/emulator -avd test \
            -no-audio \
            -no-window \
            -gpu swiftshader_indirect \
            -no-snapshot \
            -no-boot-anim \
            -camera-back none \
            -camera-front none &
          
          # 等待模拟器启动
          adb wait-for-device
          echo "Emulator started, waiting for boot complete"
          
          # 检测设备是否完全启动
          while [[ "$(adb shell getprop sys.boot_completed | tr -d '\r')" != "1" ]]; do
            echo "Waiting for boot completion..."
            sleep 3
          done
          
          # 解锁屏幕
          adb shell input keyevent 82
          echo "Emulator is ready"
        timeout-minutes: 10

      - name: List connected devices
        run: adb devices -l

      - name: Run instrumented Android tests
        run: ./gradlew connectedDebugAndroidTest
        timeout-minutes: 15

      # 可选：上传测试结果报告
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: |
            Mobile/app/build/reports/tests/*
            Mobile/app/build/outputs/androidTest-results/connected/*